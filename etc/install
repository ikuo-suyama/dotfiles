#!/usr/bin/env bash

trap 'echo Fatal Error: $0: line $LINENO: installation failed.; exit 1' ERR INT
set -euo pipefail

# globals
if [ -z "${DOTPATH:-}" ]; then
  DOTPATH=~/.dotfiles
  export DOTPATH
fi
if [ -z "${INSTALL_ANYWAY:-}" ]; then
  INSTALL_ANYWAY=No
  export INSTALL_ANYWAY
fi
DOTFILES_GITHUB=https://github.com/ikuo-suyama/dotfiles

LIST_OF_APPS="build-essential dnsutils vim git tmux curl fish fzf silversearcher-ag"
LIST_OF_APPS_UBUNTU_18="build-essential dnsutils vim git tmux curl fish silversearcher-ag"
LIST_OF_APPS_ALPINE="alpine-sdk bind-tools ncurses vim git tmux curl fish fzf the_silver_searcher"
LIST_OF_APPS_MAC="coreutils fish tmux git vim fzf ag"

# use colors on terminal
if [ -n "$(which tput)" ]; then
  tput=$(which tput)
  ncolors=$($tput colors)
fi
if [ -t 1 ] && [ -n "${ncolors:-}" ] && [ "${ncolors:-0}" -ge 8 ]; then
  RED="$(tput setaf 1)"
  GREEN="$(tput setaf 2)"
  YELLOW="$(tput setaf 3)"
  BLUE="$(tput setaf 4)"
  BOLD="$(tput bold)"
  NORMAL="$(tput sgr0)"
else
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  BOLD=""
  NORMAL=""
fi

## Logger
info() {
  printf "${GREEN}"
  echo -n " [INFO] "
  printf "${NORMAL}"
  echo "$1"
}

warn() {
  printf "${YELLOW}"
  echo -n " [WARN] "
  printf "${NORMAL}"
  echo "$1"
}

error() {
  printf "${RED}"
  echo -n " [ERROR] "
  printf "${NORMAL}"
  echo "$1"
}

log() {
  echo "  $1"
}

newline() {
  echo ""
}

# utils
is_exists() {
  which "$1" >/dev/null 2>&1
  return $?
}

is_xcode_installed() {
  xcode-select -p 1>/dev/null
  return $?
}

package_available() {
  return dpkg -l "$1" &>/dev/null
}

install_packages_ubuntu() {
  info "üíæ sudo apt update"
  sudo apt update -q

  info "üíæ sudo apt install $LIST_OF_APPS"
  if package_available "fzf"; then
    sudo apt install -q -y $LIST_OF_APPS
  else
    sudo apt install -q -y $LIST_OF_APPS_UBUNTU_18

    info "üíæ install fzf"
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    ~/.fzf/install --bin
  fi
}

install_packages_stretch() {
  info "üíæ apt update"
  apt update -q

  info "üíæ apt install $LIST_OF_APPS"
  apt install -q -y $LIST_OF_APPS
}

install_packages_alpine() {
  info "üíæ apk update"
  apk update

  info "üíæ apk add $LIST_OF_APPS_ALPINE"
  apk add $LIST_OF_APPS_ALPINE
}

install_packages_mac() {
  if ! is_xcode_installed; then
    info "üíæ xcode-select --install"
    xcode-select --install
  fi

  if ! hash brew 2>/dev/null; then
    info "‚ùó Homebrew is not instaled. Installing..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    echo '# Set PATH, MANPATH, etc., for Homebrew.' >> /Users/ikuo.suyama/.zprofile
    echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> /Users/ikuo.suyama/.zprofile
    eval "$(/opt/homebrew/bin/brew shellenv)"
  fi

  info "üíæ brew install $LIST_OF_APPS_MAC"
  brew install $LIST_OF_APPS_MAC
}

install_vim_plugin_manager() {
  info "üìù install vim plugin manager(dein)"
  mkdir -p ~/.cache/dein
  curl https://raw.githubusercontent.com/Shougo/dein-installer.vim/master/installer.sh > installer.sh
  { echo 1 && echo 1; } | sh installer.sh
  rm ./installer.sh
}

# installer
install_packages() {
  ## install packages
  newline
  info "‚õè Installing packages..."

  if [[ $(uname) = "Linux" ]]; then
    if [ -f /etc/debian_version ] || [ -f /etc/debian_release ]; then
      if is_exists "sudo"; then
        ## Ubuntu / Debian
        install_packages_ubuntu
      else
        ## Docker Image e.g. stretch
        install_packages_stretch
      fi
    elif [ -f /etc/alpine-release ]; then
      ## Alpine
      install_packages_alpine
    fi

  elif [[ $(uname) = "Darwin" ]]; then
    # MacOS
    install_packages_mac
  else
    error "üí• Your platform ($(uname -a)) is not supported."
    exit 1
  fi

  install_vim_plugin_manager

  info "‚úÖ ...Installed."
}

dotfiles_download() {
  if [ -d "$DOTPATH" ]; then
    error "üí• $DOTPATH: already exists"
    exit 1
  fi

  newline
  info "üöÄ Downloading dotfiles..."
  if is_exists "git"; then
    git clone --recursive "$DOTFILES_GITHUB" "$DOTPATH"

  elif is_exists "curl" || is_exists "wget"; then
    # curl or wget
    local tarball="https://github.com/ikuo-suyama/dotfiles/archive/master.tar.gz"
    if is_exists "curl"; then
      curl -L "$tarball"
    elif is_exists "wget"; then
      wget -O - "$tarball"
    fi | tar xvz
    if [ ! -d dotfiles-master ]; then
      error "üí• Downloaded dir: dotfiles-master does not found"
      exit 1
    fi
    command mv -f dotfiles-master "$DOTPATH"

  else
    error "üí• curl or wget required"
    exit 1
  fi

  info "‚úÖ ...Downloaded."
}

dotfiles_deploy() {
  newline
  info "üöõ Deploying dotfiles..."

  if [ ! -d $DOTPATH ]; then
    error "üí• $DOTPATH: not found"
    exit 1
  fi

  cd "$DOTPATH"

  make deploy
  info "‚úÖ ...Deploied."
}

## Start installation
dotfiles_logo='
                           __  _       __                             
     ____ ___  ____ ______/ /_(_)___  / /___ _   _____  _____________ 
    / __ `__ \/ __ `/ ___/ __/ / __ \/ / __ \ | / / _ \/ ___/ ___/ _ \
   / / / / / / /_/ / /  / /_/ / / / / / /_/ / |/ /  __/ /  (__  )  __/
  /_/ /_/ /_/\__,_/_/   \__/_/_/ /_/_/\____/|___/\___/_/  /____/\___/ 

   ** WHAT IS INSIDE? ***
  1. Download my dotfiles from '$DOTFILES_GITHUB'
  2. Symlinking dotfiles to your home directory
  3. Install packages
     for debian: ['$LIST_OF_APPS']
     for mac: [brew, '$LIST_OF_APPS_MAC']
'

printf "${BOLD}"
echo "$dotfiles_logo"
printf "${NORMAL}"

newline
if [[ ! $INSTALL_ANYWAY == "Yes" ]]; then
  read -p "$(warn '‚ùó Are you sure you want to install it? [y/N] ')" -n 1 -r REP </dev/tty

  if [[ ! $REP =~ ^[Yy]$ ]]; then
    newline
    error 'Installation canceled.'
    exit 1
  fi
fi

newline
info "üëâ Start install the environment."

install_packages
dotfiles_download
dotfiles_deploy

newline
info "‚ú® Installation succeeded. go 'fish' and exec 'fisher' for plugin installation. Enjoy!"
